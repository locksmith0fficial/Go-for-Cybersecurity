package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"malsubmit/hybrid"
	"time"
)

var sleepSeconds = 5 * time.Second

func main() {
	apiKey := flag.String("api-key", "", "--api-key <api_key_here>")
	susFile := flag.String("file", "", "--file <full_path_to_suspicious_file>")
	flag.Parse()

	// if any of the required arguements were not provided, exit
	if len(*apiKey) == 0 || len(*susFile) == 0 {
		flag.PrintDefaults()
		log.Fatal("FATAL, please provide appropriate flags")
	}
	log.Println("[+]Starting the program")

	response, err := hybrid.AnalyzeFile(*susFile, map[string]string{"environment_id": "160"}, *apiKey)
	if err != nil {
		log.Fatal("[-] Analyzing file failed due to error", err)
	}

	log.Println("Now retreiving job status for", response.JobId)
	for {
		state, err := hybrid.GetReportState("cd13a9a774197bf84bd25a30f4cd51dbc4908138e2e008c81fc1feef881c6da7/6423586b538c3be13703c2f4", *apiKey)
		if err != nil {
			log.Fatal("FATAL could not retreive report state", err)
		}
		if state.State != "SUCCESS" {
			log.Println("The job has not finished, trying again", state.State, response.JobId)
			time.Sleep(sleepSeconds)
			continue
		}
		break
	}

	report, err := hybrid.ReportSummaryID(response.JobId, *apiKey)
	if err != nil {
		log.Fatal("FATAL could not get report", err)
	}

	fmt.Println(cleanJson(report))

}

func cleanJson(report hybrid.Report) string {
	v, err := json.MarshalIndent(&report, "", "    ")
	if err != nil {
		log.Fatal("FATAL could not marshall report back to json", err)
	}
	return string(v)
}
